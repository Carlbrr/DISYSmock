// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Increment(ctx context.Context, in *IncMessage, opts ...grpc.CallOption) (*IncResponse, error)
	//passive replication. Note there's a pulse method on the server
	Replicate(ctx context.Context, in *ReplicateMessage, opts ...grpc.CallOption) (*ReplicateResponse, error)
	RegisterPulse(ctx context.Context, in *ReplicateMessage, opts ...grpc.CallOption) (*Void, error)
	CutOfReplica(ctx context.Context, in *CutReplica, opts ...grpc.CallOption) (*Void, error)
	//ring based election - note we use a call ring election method on the server
	RingElection(ctx context.Context, in *PortsAndClocks, opts ...grpc.CallOption) (*Void, error)
	SelectAsNewLeader(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ElectionPorts, error)
	BroadcastNewLeader(ctx context.Context, in *ElectionPorts, opts ...grpc.CallOption) (*Void, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Increment(ctx context.Context, in *IncMessage, opts ...grpc.CallOption) (*IncResponse, error) {
	out := new(IncResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatService/Increment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Replicate(ctx context.Context, in *ReplicateMessage, opts ...grpc.CallOption) (*ReplicateResponse, error) {
	out := new(ReplicateResponse)
	err := c.cc.Invoke(ctx, "/proto.ChatService/Replicate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RegisterPulse(ctx context.Context, in *ReplicateMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.ChatService/RegisterPulse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CutOfReplica(ctx context.Context, in *CutReplica, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.ChatService/CutOfReplica", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RingElection(ctx context.Context, in *PortsAndClocks, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.ChatService/RingElection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SelectAsNewLeader(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ElectionPorts, error) {
	out := new(ElectionPorts)
	err := c.cc.Invoke(ctx, "/proto.ChatService/SelectAsNewLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) BroadcastNewLeader(ctx context.Context, in *ElectionPorts, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.ChatService/BroadcastNewLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Increment(context.Context, *IncMessage) (*IncResponse, error)
	//passive replication. Note there's a pulse method on the server
	Replicate(context.Context, *ReplicateMessage) (*ReplicateResponse, error)
	RegisterPulse(context.Context, *ReplicateMessage) (*Void, error)
	CutOfReplica(context.Context, *CutReplica) (*Void, error)
	//ring based election - note we use a call ring election method on the server
	RingElection(context.Context, *PortsAndClocks) (*Void, error)
	SelectAsNewLeader(context.Context, *Void) (*ElectionPorts, error)
	BroadcastNewLeader(context.Context, *ElectionPorts) (*Void, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Increment(context.Context, *IncMessage) (*IncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Increment not implemented")
}
func (UnimplementedChatServiceServer) Replicate(context.Context, *ReplicateMessage) (*ReplicateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedChatServiceServer) RegisterPulse(context.Context, *ReplicateMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPulse not implemented")
}
func (UnimplementedChatServiceServer) CutOfReplica(context.Context, *CutReplica) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CutOfReplica not implemented")
}
func (UnimplementedChatServiceServer) RingElection(context.Context, *PortsAndClocks) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RingElection not implemented")
}
func (UnimplementedChatServiceServer) SelectAsNewLeader(context.Context, *Void) (*ElectionPorts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAsNewLeader not implemented")
}
func (UnimplementedChatServiceServer) BroadcastNewLeader(context.Context, *ElectionPorts) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastNewLeader not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Increment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Increment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/Increment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Increment(ctx, req.(*IncMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Replicate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Replicate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/Replicate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Replicate(ctx, req.(*ReplicateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RegisterPulse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RegisterPulse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/RegisterPulse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RegisterPulse(ctx, req.(*ReplicateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CutOfReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CutReplica)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CutOfReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/CutOfReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CutOfReplica(ctx, req.(*CutReplica))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RingElection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortsAndClocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RingElection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/RingElection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RingElection(ctx, req.(*PortsAndClocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SelectAsNewLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SelectAsNewLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/SelectAsNewLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SelectAsNewLeader(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_BroadcastNewLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionPorts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).BroadcastNewLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ChatService/BroadcastNewLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).BroadcastNewLeader(ctx, req.(*ElectionPorts))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Increment",
			Handler:    _ChatService_Increment_Handler,
		},
		{
			MethodName: "Replicate",
			Handler:    _ChatService_Replicate_Handler,
		},
		{
			MethodName: "RegisterPulse",
			Handler:    _ChatService_RegisterPulse_Handler,
		},
		{
			MethodName: "CutOfReplica",
			Handler:    _ChatService_CutOfReplica_Handler,
		},
		{
			MethodName: "RingElection",
			Handler:    _ChatService_RingElection_Handler,
		},
		{
			MethodName: "SelectAsNewLeader",
			Handler:    _ChatService_SelectAsNewLeader_Handler,
		},
		{
			MethodName: "BroadcastNewLeader",
			Handler:    _ChatService_BroadcastNewLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/incService.proto",
}
